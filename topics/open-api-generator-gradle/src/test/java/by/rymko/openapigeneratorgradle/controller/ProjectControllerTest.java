package by.rymko.openapigeneratorgradle.controller;

import by.rymko.openapigeneratorgradle.api.ProjectsApi;
import by.rymko.openapigeneratorgradle.mapper.ProjectModelMapper;
import by.rymko.openapigeneratorgradle.model.ProjectResponse;
import lombok.extern.log4j.Log4j2;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.jdbc.JdbcTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static hepler.ProjectRequestBuilder.project;
import static java.lang.String.format;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/**
 * Test to check realization of {@link ProjectController} which implements {@link ProjectsApi} generated by Open API Generator Gradle plugin.
 */
@SpringBootTest
@AutoConfigureMockMvc
@Log4j2
class ProjectControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    /**
     * Method which deletes all data from table before running every test.
     */
    @BeforeEach
    void setup() {
        log.info("Deleting records from table.");
        JdbcTestUtils.deleteFromTables(jdbcTemplate, "project");
    }

    /**
     * Verify that "/projects" endpoint returns status 200.
     *
     * @throws Exception the exception
     */
    @Test
    public void shouldReturnOkOnProjectsEndpoint() throws Exception {
        mockMvc.perform(get("/projects"))
                .andExpect(status().isOk());
    }

    /**
     * Verify that "/projects" endpoint should return all ProjectResponse entities.
     *
     * @throws Exception the exception
     */
    @Test
    public void shouldReturnAllRecordsOnProjectsEndpoint() throws Exception {
        String projectPrefix = "project";
        int numberOfEntities = 2;
        //        Adding two entities with defined prefix to define name using POST method with mockMvc.
        createProjects(projectPrefix, numberOfEntities);

        mockMvc.perform(get("/projects"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(numberOfEntities)));
    }

    /**
     * Verify that "/projects?name=" endpoint should return ProjectResponse entity with defined name.
     *
     * @throws Exception the exception
     */
    @Test
    public void shouldRetrieveExistingProjectByName() throws Exception {
        String projectName = "project-1";
        String requestParameter = "name";
        //        Adding one entity with defined projectName using POST method with mockMvc.
        ProjectResponse projectResponse = createOneProjectWithName(projectName);

        mockMvc.perform(
                get("/projects").param(requestParameter, projectName))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].name", is(projectName)));
    }

    /**
     * Create list of ProjectResponse entities with formatted name according to provided prefix and amount of projects.
     *
     */
    private List<ProjectResponse> createProjects(String prefix, int numberOfProjects) {
        List<ProjectResponse> projectResponses = IntStream.range(0, numberOfProjects)
                .mapToObj(num -> createOneProjectWithName(format("%s-%d", prefix, num + 1)))
                .collect(Collectors.toList());
        return projectResponses;
    }

    /**
     * Create one ProjectResponse entity using mockMvc POST method.
     *
     */
    private ProjectResponse createOneProjectWithName(String name) {
        try {
            MvcResult mvcResult = mockMvc.perform(
                    post("/projects")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(project(name)))
                    .andExpect(status().isCreated())
                    .andReturn();
            String contentResponse = mvcResult.getResponse().getContentAsString();
            ProjectResponse projectResponse = ProjectModelMapper.jsonToProject(contentResponse);
            return projectResponse;
        } catch (Exception e) {
            throw new IllegalArgumentException("Invalid Request to Create Project with name" + name, e);
        }
    }

}