# OpenAPI 3 has quite a difference with OpenAPI 2, the way the linter works in the editor will be based on this.
openapi: 3.0.0

# This section will contain metadata information about the API. It will be shown on the editor/UI when we publish this
info:
  title: To-Do Board API
  version: 1.0.0
  description: API specification to support daily to-do list operations

# The list of the servers that we can use to use the API. This will be rendered as a combo box in the editor/UI when we publish it, so the user could pick and use the endpoint they prefer.
servers:
  - url: http://dev-api.todoboard.com/v1
    description: DEV-ENV
  - url: http://api.todoboard.com/v1
    description: PROD-ENV

paths:
  /projects:
    get:
      parameters:
        - in: query
          description: find project by name
          name: name
          schema:
            type: string
      operationId: searchProjects
      tags:
        - Projects
      description: retrieve all available projects in paginated way
      responses:
        200:
          description: successfully retrieved all projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas.yaml#/ProjectResponse'
    post:
      operationId: createProject
      tags:
        - Projects
      description: create new project entry
#      parameters:
#        - $ref: 'parameters.yaml#/X-Request-ID'
#        - $ref: 'parameters.yaml#/X-Request-ProjectRequest'
#        - $ref: 'parameters.yaml#/X-Request-Array'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.yaml#/ProjectRequest'
      responses:
        201:
          description: successfully created a project
          content:
            application/json:
              schema:
                $ref: 'schemas.yaml#/ProjectRequest'


  /projects/{projectId}:
    get:
      operationId: getProjects
      tags:
        - Projects
      description: retrieve a project by id
      parameters:
        - name: projectId
          in: path
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
          allowEmptyValue: false
          example: 1

      responses:
        200:
          description: the specific project successfully retrieved
          content:
            application/json:
              schema:
                $ref: 'schemas.yaml#/ProjectResponse'